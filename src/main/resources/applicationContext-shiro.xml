<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/cache
       http://www.springframework.org/schema/cache/spring-cache.xsd">
    <!-- Shiro生命周期处理器 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- MyBatis使用ehcache缓存 start -->
    <cache:annotation-driven cache-manager="cacheManagerEncache"/>
    <bean id="cacheManagerEncache" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="ehCacheManager"></property>
    </bean>
    <bean id="ehCacheManager"
          class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:ehcache.xml"/>
        <property name="shared" value="true"></property> <!-- 使用shiro缓存这里是关键！！！没有必错  -->
    </bean>
    <!-- end MyBatis使用ehcache缓存 -->

    <!-- 配置权限管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- 使用下面配置的缓存管理器 -->
        <property name="cacheManager" ref="shiroCacheManager"/>
        <!-- ref对应我们写的realm  MyShiro -->
        <property name="realm" ref="myShiro"/>
    </bean>
    <!-- 缓存管理 -->
    <bean id="myShiro" class="com.hellogood.http.shiro.MyShiro"/>
    <!-- shiro使用Ehcache实现 -->
    <bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManager" ref="ehCacheManager"/>
    </bean>

    <!-- 自定义的过滤器，用来判断当前用户是否是roleOrFilter["comm,test"]中的某个角色 -->
    <bean id="roleOrFilter" class="com.hellogood.http.shiro.RolesORAuthorizationFilter" />
    <!--
       Shiro主过滤器本身功能十分强大，其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行
       Web应用中，Shiro可控制的Web请求必须经过Shiro主过滤器的拦截，Shiro对基于Spring的Web应用提供了完美的支持.
       id- shiroFilter要和我们在web.xml中配置的过滤器一致,MyShiroFilterFactoryBean过滤URL出现JSESSIONID后缀
    -->
    <bean id="shiroFilter" class="com.hellogood.http.shiro.MyShiroFilterFactoryBean" depends-on="roleOrFilter">
        <!-- Shiro的核心安全接口，这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"></property>
        <!-- 要求登录时的链接(登录页面地址)，非必须的属性，默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
        <property name="loginUrl" value="/pages/login.jsp"></property>
        <!-- 登录成功后要跳转的连接(本例中此属性用不到，因为登录成功后的处理逻辑在LoginController里硬编码) -->
        <!-- <property name="successUrl" value="/" ></property> -->
        <!-- 用户访问未对其授权的资源时，所显示的连接 -->
        <property name="unauthorizedUrl" value="/validate/unauthorizedUrl.do"></property>
        <!-- 添加各种验证过滤器 -->
        <property name="filters">
            <map>
                <entry key="roleOrFilter" value-ref="roleOrFilter"/>
            </map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                <!--
                    anon:例子/admins/**=anon 没有参数，表示可以匿名使用。
                    authc:例如/admins/user/**=authc表示需要认证(登录)才能使用，没有参数
                    roles：例子/admins/user/**=roles[admin],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，当有多个参数时，例如admins/user/**=roles["admin,guest"],每个参数通过才算通过，相当于hasAllRoles()方法。
                    perms：例子/admins/user/**=perms[user:add:*],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，例如/admins/user/**=perms["user:add:*,user:modify:*"]，当有多个参数时必须每个参数都通过才通过，想当于isPermitedAll()方法。
                    rest：例子/admins/user/**=rest[user],根据请求的方法，相当于/admins/user/**=perms[user:method] ,其中method为post，get，delete等。
                    port：例子/admins/user/**=port[8081],当请求的url的端口不是8081是跳转到schemal://serverName:8081?queryString,其中schmal是协议http或https等，serverName是你访问的host,8081是url配置里port的端口，queryString是你访问的url里的？后面的参数。
                    authcBasic：例如/admins/user/**=authcBasic没有参数表示httpBasic认证
                    ssl:例子/admins/user/**=ssl没有参数，表示安全的url请求，协议为https
                    user:例如/admins/user/**=user没有参数表示必须存在用户，当登入操作时不做检查

                    <shiro:authenticated> 登录之后
                    <shiro:notAuthenticated> 不在登录状态时
                    <shiro:guest> 用户在没有RememberMe时
                    <shiro:user> 用户在RememberMe时
                    <shiro:hasAnyRoles name="abc,123" > 在有abc或者123角色时
                    <shiro:hasRole name="abc"> 拥有角色abc
                    <shiro:lacksRole name="abc"> 没有角色abc
                    <shiro:hasPermission name="abc"> 拥有权限abc
                    <shiro:lacksPermission name="abc"> 没有权限abc
                    <shiro:principal> 显示用户登录名
                    -->
                /pages/login.jsp = anon
            </value>
        </property>
    </bean>

</beans>